habitats("Habitat_DSLDistance.csv")
# fucntion for reading in habitat data
habitats <- function(hab_file){ # ,arg1, arg2, ...
habitat <- read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
#habitat$habitatcode <- paste(habitat$BaseHabitatData1,habitat$BaseHabitatData2, sep="_")
#statements
return(object)
}
# fucntion for reading in habitat data
habitats <- function(hab_file){ # ,arg1, arg2, ...
habitat <- read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
#habitat$habitatcode <- paste(habitat$BaseHabitatData1,habitat$BaseHabitatData2, sep="_")
#statements
return(object)
}
habitats("Habitat_DSLDistance.csv")
# fucntion for reading in habitat data
habitats <- function(hab_file){ # ,arg1, arg2, ...
habitat <- read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
#habitat$habitatcode <- paste(habitat$BaseHabitatData1,habitat$BaseHabitatData2, sep="_")
#statements
return(habitat)
}
habitats("Habitat_DSLDistance.csv")
# fucntion for reading in habitat data
habitats <- function(hab_file){ # ,arg1, arg2, ...
habitat <- read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
#habitat$habitatcode <- paste(habitat$BaseHabitatData1,habitat$BaseHabitatData2, sep="_")
#statements
#return(habitat)
}
habitats("Habitat_DSLDistance.csv")
habitats <- habitats("Habitat_DSLDistance.csv")
source("functions.R")
habitats1 <- habitats("Habitat_DSLDistance.csv")
source('E:/Dropbox (PNHP @ WPC)/RCOAassoc/201804/RCOA_Habitat/ImportantHabitatsTool.R')
habitat <- read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
source("functions.R")
habitats1 <- habitats("Habitat_DSLDistance.csv")
hab_file <- "Habitat_DSLDistance.csv"
habitat <- read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
habitat$habitatcode <- paste(habitat$BaseHabitatData1,habitat$BaseHabitatData2,sep="_")
habitats1 <- habitats("Habitat_DSLDistance.csv")
source("functions.R")
habitats1 <- habitats("Habitat_DSLDistance.csv")
source("functions.R")
habi
source("functions.R")
habitats1 <- habitats("Habitat_DSLDistance.csv")
# fucntion for reading in habitat data
habitats <- function(hab_file){ # ,arg1, arg2, ...
read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
#aaa$habitatcode <- paste(aaa$BaseHabitatData1,aaa$BaseHabitatData2,sep="_")
#return(habitat)
}
habitats1 <- habitats("Habitat_DSLDistance.csv")
hab_file <- "Habitat_DSLDistance.csv"
# fucntion for reading in habitat data
habitats <- function(hab_file){ # ,arg1, arg2, ...
aaa <- read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
aaa$habitatcode <- paste(aaa$BaseHabitatData1,aaa$BaseHabitatData2,sep="_")
return(aaa)
}
habitats1 <- habitats("Habitat_DSLDistance.csv")
View(habitats1)
# function for reading in habitat data
habitats <- function(hab_file){ # ,arg1, arg2, ...
aaa <- read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
aaa$habitatcode <- paste(aaa$BaseHabitatData1,aaa$BaseHabitatData2,sep="_")
return(aaa)
}
# function to created summarized habitat weights
habitat_weights <- function(sp_file, subform=FALSE){
# turns the data frame into a table of counts and calculate proportions.
# the margin setting in prop.table adds row summaries of the individual habitat proportions
#  count_table <- table(species_final$SNAME,species_final$habitatcode) # turns the raw data into a table of counts
#  prop_table <- prop.table(count_table,margin=1) # adds column? summaries
#  prop_table <- addmargins(prop_table,margin=2) #adds row? summaries
# convert prop_table into a dataframe
#  occ_prop <- as.data.frame.matrix(prop_table)
#  occ_prop <- cbind(row.names = rownames(occ_prop), occ_prop) # adds the row names into the data frame
#  setDT(occ_prop, keep.rownames = TRUE)[]
# this transforms the data into a table with one entry per species and habitat combination, this makes
#    the calculatations a little easier (eg. less matrix math)
#  results_melt <- melt(occ_prop, id="rn")
#  setnames(results_melt,"variable","habitatcode")
#  setnames(results_melt,"value","observed")
#  data_merge <- merge(results_melt,habitat,by="habitatcode",all=TRUE) # , allow.cartesian=TRUE
#  data_merge <- data_merge[ which(!is.na(data_merge$expected)), ] # gets rid of empty values
# formation subset   #######################################################
lu_formation <- read.csv("lu_formation.csv", stringsAsFactors=FALSE)
data_merge$Formation <- lu_formation[,3][match(data_merge$BaseHabitatData1,lu_formation[,5])] # join the formation in
#gets list of acceptable formations
if(isTRUE(subform)) {
formation <- read.csv("lu_SGCN_Formation1.csv", stringsAsFactors=FALSE)
formation <- separate_rows(formation,Formation,sep=";")
}
return(formation)
}
wt1 <- habitat_weights("test.csv",TRUE)
wt1 <- habitat_weights("test.csv",TRUE)
formation <- read.csv("lu_SGCN_Formation1.csv", stringsAsFactors=FALSE)
formation <- read.csv("lu_SGCN_Formation1.csv", stringsAsFactors=FALSE)
formation <- separate_rows(formation,Formation,sep=";")
habitats1 <- habitats("Habitat_DSLDistance.csv")
wt1 <- habitat_weights("test.csv",TRUE)
source("functions.R")
source("functions.R")
# function to created summarized habitat weights
habitat_weights <- function(sp_file, subform=FALSE){
# turns the data frame into a table of counts and calculate proportions.
# the margin setting in prop.table adds row summaries of the individual habitat proportions
#  count_table <- table(species_final$SNAME,species_final$habitatcode) # turns the raw data into a table of counts
#  prop_table <- prop.table(count_table,margin=1) # adds column? summaries
#  prop_table <- addmargins(prop_table,margin=2) #adds row? summaries
# convert prop_table into a dataframe
#  occ_prop <- as.data.frame.matrix(prop_table)
#  occ_prop <- cbind(row.names = rownames(occ_prop), occ_prop) # adds the row names into the data frame
#  setDT(occ_prop, keep.rownames = TRUE)[]
# this transforms the data into a table with one entry per species and habitat combination, this makes
#    the calculatations a little easier (eg. less matrix math)
#  results_melt <- melt(occ_prop, id="rn")
#  setnames(results_melt,"variable","habitatcode")
#  setnames(results_melt,"value","observed")
#  data_merge <- merge(results_melt,habitat,by="habitatcode",all=TRUE) # , allow.cartesian=TRUE
#  data_merge <- data_merge[ which(!is.na(data_merge$expected)), ] # gets rid of empty values
# formation subset   #######################################################
# lu_formation <- read.csv("lu_formation.csv", stringsAsFactors=FALSE)
# data_merge$Formation <- lu_formation[,3][match(data_merge$BaseHabitatData1,lu_formation[,5])] # join the formation in
#gets list of acceptable formations
if(isTRUE(subform)) {
formation <- read.csv("lu_SGCN_Formation1.csv", stringsAsFactors=FALSE)
formation <- separate_rows(formation,Formation,sep=";")
}
return(formation)
}
wt1 <- habitat_weights("test.csv",TRUE)
View(wt1)
View(formation)
wt1 <- habitat_weights("test.csv",FALSE)
source('E:/Dropbox (PNHP @ WPC)/RCOAassoc/201804/RCOA_Habitat/ImportantHabitatsTool.R')
source('E:/Dropbox (PNHP @ WPC)/RCOAassoc/201804/RCOA_Habitat/ImportantHabitatsTool.R')
source("functions.R")
library(data.table)
library(plyr)
library(stringr)
library(tidyr)
setwd("E:/Dropbox (PNHP @ WPC)/RCOAassoc/201804/RCOA_Habitat")
# function for reading in habitat data
habitats <- function(hab_file){ # ,arg1, arg2, ...
aaa <- read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
aaa$habitatcode <- paste(aaa$BaseHabitatData1,aaa$BaseHabitatData2,sep="_")
return(aaa)
}
# function to created summarized habitat weights
habitat_weights <- function(sp_file, subform=FALSE){
# turns the data frame into a table of counts and calculate proportions.
# the margin setting in prop.table adds row summaries of the individual habitat proportions
#  count_table <- table(species_final$SNAME,species_final$habitatcode) # turns the raw data into a table of counts
#  prop_table <- prop.table(count_table,margin=1) # adds column? summaries
#  prop_table <- addmargins(prop_table,margin=2) #adds row? summaries
# convert prop_table into a dataframe
#  occ_prop <- as.data.frame.matrix(prop_table)
#  occ_prop <- cbind(row.names = rownames(occ_prop), occ_prop) # adds the row names into the data frame
#  setDT(occ_prop, keep.rownames = TRUE)[]
# this transforms the data into a table with one entry per species and habitat combination, this makes
#    the calculatations a little easier (eg. less matrix math)
#  results_melt <- melt(occ_prop, id="rn")
#  setnames(results_melt,"variable","habitatcode")
#  setnames(results_melt,"value","observed")
#  data_merge <- merge(results_melt,habitat,by="habitatcode",all=TRUE) # , allow.cartesian=TRUE
#  data_merge <- data_merge[ which(!is.na(data_merge$expected)), ] # gets rid of empty values
# formation subset   #######################################################
# lu_formation <- read.csv("lu_formation.csv", stringsAsFactors=FALSE)
# data_merge$Formation <- lu_formation[,3][match(data_merge$BaseHabitatData1,lu_formation[,5])] # join the formation in
#gets list of acceptable formations
if(isTRUE(subform)) {
formation <- read.csv("lu_SGCN_Formation1.csv", stringsAsFactors=FALSE)
formation <- separate_rows(formation,Formation,sep=";")
}
#return(formation)
}
habitats1 <- habitats("Habitat_DSLDistance.csv")
wt1 <- habitat_weights("test.csv",FALSE)
wt1 <- habitat_weights("test.csv",TRUE)
t
wt1 <- habitat_weights("test.csv",subform=TRUE)
# function for reading in habitat data
habitats <- function(hab_file){ # ,arg1, arg2, ...
aaa <- read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
aaa$habitatcode <- paste(aaa$BaseHabitatData1,aaa$BaseHabitatData2,sep="_")
aaa <- aaa[,!(names(aaa) %in% c("OBJECTID","VALUE"))] #drop a few unneeded columns
# this counts the 'expected' values for the analysis. Basically calculates a proportion
aaa$expected <- aaa$Count / sum(aaa$Count)
aaa <- subset(aaa, !duplicated(aaa)) # this gets down to a unique set of habitat codes as  having duplicates seems to upset the merge below. this step might not be necessary
return(aaa)
}
habitats1 <- habitats("Habitat_DSLDistance.csv")
View(habitats1)
# function for reading in habitat data
habitats <- function(hab_file){ # ,arg1, arg2, ...
aaa <- read.csv(hab_file, na.strings=c("NA")) # DSL and Distance to Water
aaa$habitatcode <- paste(aaa$BaseHabitatData1,aaa$BaseHabitatData2,sep="_")
aaa <- aaa[,!(names(aaa) %in% c("OBJECTID","VALUE"))] #drop a few unneeded columns
# this counts the 'expected' values for the analysis. Basically calculates a proportion
aaa$expected <- aaa$Count / sum(aaa$Count)
aaa <- subset(aaa, !duplicated(aaa)) # this gets down to a unique set of habitat codes as having duplicates seems to upset the merge below. this step might not be necessary
return(aaa)
}
# function to created summarized habitat weights
habitat_weights <- function(sp_file, subform=FALSE){
# turns the data frame into a table of counts and calculate proportions.
# the margin setting in prop.table adds row summaries of the individual habitat proportions
#  count_table <- table(species_final$SNAME,species_final$habitatcode) # turns the raw data into a table of counts
#  prop_table <- prop.table(count_table,margin=1) # adds column? summaries
#  prop_table <- addmargins(prop_table,margin=2) #adds row? summaries
# convert prop_table into a dataframe
#  occ_prop <- as.data.frame.matrix(prop_table)
#  occ_prop <- cbind(row.names = rownames(occ_prop), occ_prop) # adds the row names into the data frame
#  setDT(occ_prop, keep.rownames = TRUE)[]
# this transforms the data into a table with one entry per species and habitat combination, this makes
#    the calculatations a little easier (eg. less matrix math)
#  results_melt <- melt(occ_prop, id="rn")
#  setnames(results_melt,"variable","habitatcode")
#  setnames(results_melt,"value","observed")
#  data_merge <- merge(results_melt,habitat,by="habitatcode",all=TRUE) # , allow.cartesian=TRUE
#  data_merge <- data_merge[ which(!is.na(data_merge$expected)), ] # gets rid of empty values
# formation subset   #######################################################
# lu_formation <- read.csv("lu_formation.csv", stringsAsFactors=FALSE)
# data_merge$Formation <- lu_formation[,3][match(data_merge$BaseHabitatData1,lu_formation[,5])] # join the formation in
#gets list of acceptable formations
if(isTRUE(subform)) {
formation <- read.csv("lu_SGCN_Formation1.csv", stringsAsFactors=FALSE)
formation <- separate_rows(formation,Formation,sep=";")
}
#return(formation)
}
